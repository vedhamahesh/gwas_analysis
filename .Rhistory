data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,2],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat[,1])))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
# Read-in our covariate data
xc_mat = read.csv('projectcovars.csv', row.names = 1)
# Define our function to run GWAS and get p-values
pval_calculator_w_covars <- function(pheno_input, xa_input, xd_input, xz_input){
n_samples <- length(xa_input) # calculate your number of samples
X_mx <- cbind(rep(1,length(xa_input)),xa_input, xd_input, xz_input) #create your X matrix under H1
MLE_beta <- ginv(t(X_mx) %*% X_mx) %*% t(X_mx) %*% pheno_input #calculate your MLE of the betas
x_h0 =  cbind(rep(1,length(xa_input)), xz_input) #calculate your x under H0
MLE_h0 = ginv(t(x_h0) %*% x_h0) %*% t(x_h0) %*% pheno_input #calculate your MLE under h0
y_hat_0 = x_h0 %*% MLE_h0 #calculate y_hat under the null hypothesis
y_hat_1 = X_mx%*% MLE_beta #calculate y_hat under H1
SSE_theta_0 = sum((pheno_input-y_hat_0)^2) #calculate SSE under null
SSE_theta_1 = sum((pheno_input-y_hat_1)^2) #calculate SSE under H1
df_M <- 2
df_E <- n_samples - 4
numerator <- (SSE_theta_0-SSE_theta_1) / df_M #calculate your F statistic
denom <- SSE_theta_1 / df_E
Fstatistic <-numerator / denom
# to check if it is correct
pval <- pf(Fstatistic, df_M, df_E,lower.tail = FALSE) #calculate your p value and return it
return(pval)
}
# Run the function
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,2],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat[,1]))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
# Read-in our covariate data
xc_mat = read.csv('projectcovars.csv', row.names = 1)
# Define our function to run GWAS and get p-values
pval_calculator_w_covars <- function(pheno_input, xa_input, xd_input, xz_input){
n_samples <- length(xa_input) # calculate your number of samples
X_mx <- cbind(rep(1,length(xa_input)),xa_input, xd_input, xz_input) #create your X matrix under H1
MLE_beta <- ginv(t(X_mx) %*% X_mx) %*% t(X_mx) %*% pheno_input #calculate your MLE of the betas
x_h0 =  cbind(rep(1,length(xa_input)), xz_input) #calculate your x under H0
MLE_h0 = ginv(t(x_h0) %*% x_h0) %*% t(x_h0) %*% pheno_input #calculate your MLE under h0
y_hat_0 = x_h0 %*% MLE_h0 #calculate y_hat under the null hypothesis
y_hat_1 = X_mx%*% MLE_beta #calculate y_hat under H1
SSE_theta_0 = sum((pheno_input-y_hat_0)^2) #calculate SSE under null
SSE_theta_1 = sum((pheno_input-y_hat_1)^2) #calculate SSE under H1
df_M <- 2
df_E <- n_samples - 4
numerator <- (SSE_theta_0-SSE_theta_1) / df_M #calculate your F statistic
denom <- SSE_theta_1 / df_E
Fstatistic <-numerator / denom
# to check if it is correct
pval <- pf(Fstatistic, df_M, df_E,lower.tail = FALSE) #calculate your p value and return it
return(pval)
}
# Run the function
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,2],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat[,1])))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
# Read-in our covariate data
xc_mat = read.csv('projectcovars.csv', row.names = 1)
# Define our function to run GWAS and get p-values
pval_calculator_w_covars <- function(pheno_input, xa_input, xd_input, xz_input){
n_samples <- length(xa_input) # calculate your number of samples
X_mx <- cbind(rep(1,length(xa_input)),xa_input, xd_input, xz_input) #create your X matrix under H1
MLE_beta <- ginv(t(X_mx) %*% X_mx) %*% t(X_mx) %*% pheno_input #calculate your MLE of the betas
x_h0 =  cbind(rep(1,length(xa_input)), xz_input) #calculate your x under H0
MLE_h0 = ginv(t(x_h0) %*% x_h0) %*% t(x_h0) %*% pheno_input #calculate your MLE under h0
y_hat_0 = x_h0 %*% MLE_h0 #calculate y_hat under the null hypothesis
y_hat_1 = X_mx%*% MLE_beta #calculate y_hat under H1
SSE_theta_0 = sum((pheno_input-y_hat_0)^2) #calculate SSE under null
SSE_theta_1 = sum((pheno_input-y_hat_1)^2) #calculate SSE under H1
df_M <- 2
df_E <- n_samples - 4
numerator <- (SSE_theta_0-SSE_theta_1) / df_M #calculate your F statistic
denom <- SSE_theta_1 / df_E
Fstatistic <-numerator / denom
# to check if it is correct
pval <- pf(Fstatistic, df_M, df_E,lower.tail = FALSE) #calculate your p value and return it
return(pval)
}
# Run the function
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = as.matrix(sim_pheno_mx[,2]),
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat[,1])))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
# Read-in our covariate data
xc_mat = read.csv('projectcovars.csv', row.names = 1)
# Define our function to run GWAS and get p-values
pval_calculator_w_covars <- function(pheno_input, xa_input, xd_input, xz_input){
n_samples <- length(xa_input) # calculate your number of samples
X_mx <- cbind(rep(1,length(xa_input)),xa_input, xd_input, xz_input) #create your X matrix under H1
MLE_beta <- ginv(t(X_mx) %*% X_mx) %*% t(X_mx) %*% pheno_input #calculate your MLE of the betas
x_h0 =  cbind(rep(1,length(xa_input)), xz_input) #calculate your x under H0
MLE_h0 = ginv(t(x_h0) %*% x_h0) %*% t(x_h0) %*% pheno_input #calculate your MLE under h0
y_hat_0 = x_h0 %*% MLE_h0 #calculate y_hat under the null hypothesis
y_hat_1 = X_mx%*% MLE_beta #calculate y_hat under H1
SSE_theta_0 = sum((pheno_input-y_hat_0)^2) #calculate SSE under null
SSE_theta_1 = sum((pheno_input-y_hat_1)^2) #calculate SSE under H1
df_M <- 2
df_E <- n_samples - 4
numerator <- (SSE_theta_0-SSE_theta_1) / df_M #calculate your F statistic
denom <- SSE_theta_1 / df_E
Fstatistic <-numerator / denom
# to check if it is correct
pval <- pf(Fstatistic, df_M, df_E,lower.tail = FALSE) #calculate your p value and return it
return(pval)
}
# Run the function
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,2],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat[,1])))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
# Read-in our covariate data
xc_mat = read.csv('projectcovars.csv', row.names = 1)
# Define our function to run GWAS and get p-values
pval_calculator_w_covars <- function(pheno_input, xa_input, xd_input, xz_input){
n_samples <- length(xa_input) # calculate your number of samples
X_mx <- cbind(rep(1,length(xa_input)),xa_input, xd_input, xz_input) #create your X matrix under H1
MLE_beta <- ginv(t(X_mx) %*% X_mx) %*% t(X_mx) %*% pheno_input #calculate your MLE of the betas
x_h0 =  cbind(rep(1,length(xa_input)), xz_input) #calculate your x under H0
MLE_h0 = ginv(t(x_h0) %*% x_h0) %*% t(x_h0) %*% pheno_input #calculate your MLE under h0
y_hat_0 = x_h0 %*% MLE_h0 #calculate y_hat under the null hypothesis
y_hat_1 = X_mx%*% MLE_beta #calculate y_hat under H1
SSE_theta_0 = sum((pheno_input-y_hat_0)^2) #calculate SSE under null
SSE_theta_1 = sum((pheno_input-y_hat_1)^2) #calculate SSE under H1
df_M <- 2
df_E <- n_samples - 4
numerator <- (SSE_theta_0-SSE_theta_1) / df_M #calculate your F statistic
denom <- SSE_theta_1 / df_E
Fstatistic <-numerator / denom
# to check if it is correct
pval <- pf(Fstatistic, df_M, df_E,lower.tail = FALSE) #calculate your p value and return it
return(pval)
}
# Run the function
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,5],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat[,1])))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
library(MASS)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(data.table)
# Convert genotypes to Xa & Xd
# # Details can be found in lab 6
gen_import <- read.csv("projectgenotypes.csv",
header = TRUE,
stringsAsFactors = FALSE,
row.names = 1, colClasses = "character")
genotype_coder <- function(gen_import, maf_limit){
gen_input = mapply(c,gen_import[,seq(1,ncol(gen_import),2)], gen_import[,seq(2,ncol(gen_import),2)])
xa_converter <- function(gen_col, numSamples, maf_limit){
geno_count <- table(gen_col)
if(min(geno_count)/length(gen_col) <= maf_limit){
return(rep(3,numSamples))
}
minor_allele <- names(geno_count[geno_count == min(geno_count)])
xa <- (gen_col[1:numSamples]==minor_allele) + (gen_col[(numSamples+1):length(gen_col)]==minor_allele)
xa <- xa-1
return(xa)
}
xa_mat  <- apply(gen_input, 2, xa_converter, nrow(gen_import), 0.05)
xa_mat <- xa_mat[,xa_mat[1,]!=3]
xd_mat <- 1 - 2*abs(xa_mat)
return(list(xa_mat,xd_mat))
}
codes <- genotype_coder(gen_import, 0)
xa_mat <- codes[[1]]
xd_mat <- codes[[2]]
# Load in phenotype data and run GWAS
sim_pheno_mx <- read.csv("projectphenotypes.csv",
header = TRUE, row.names = 1)
pval_calculator <- function(pheno_input, xa_input, xd_input){
n_samples <- length(xa_input)
X_mx <- cbind(1,xa_input,xd_input)
MLE_beta <- ginv(t(X_mx) %*% X_mx) %*% t(X_mx) %*% pheno_input
y_hat <- X_mx %*% MLE_beta
SSM <- sum((y_hat - mean(pheno_input))^2)
SSE <- sum((pheno_input - y_hat)^2)
df_M <- 2
df_E <- n_samples - 3
MSM <- SSM / df_M
MSE <- SSE / df_E
Fstatistic <- MSM / MSE
pval <- pf(Fstatistic, df_M, df_E,lower.tail = FALSE)
return(pval)
}
results.1 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator(xa_input = xa_mat[, column.counter],
xd_input = xd_mat[, column.counter],
pheno_input = sim_pheno_mx[,5]))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
# Manhattan Plot
my.alpha = 0.05/ncol(xa_mat)
man <- ggplot(results.1, aes(x = index, y = -log10(p))) +
geom_point() +
geom_hline(yintercept = -log10(my.alpha), color = 'red', lty = 2) +
labs(x = 'Index', y = expression(-log[10]~p),
title = 'GWAS Manhattan Plot', subtitle='Covariate NOT Included')
# QQ plot
observed_pvals = sort(results.1$p)
expected_pvals = qunif(seq(0, 1, length.out = length(observed_pvals) + 2), min = 0, max = 1)  ## Generate expected values. Note that we are using length+2
expected_pvals = expected_pvals[expected_pvals != 0 & expected_pvals != 1]  ## Remove the two extra values since they are 0 and 1
p_df = data.frame(observed = -log10(observed_pvals),
expected = -log10(expected_pvals))
qq <- ggplot(p_df, aes(x = expected, y = observed)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = 'red') +
labs(x = '-log10 Expected p-val',
y = '-log10 Observed p-val',
title = 'GWAS QQ plot',
subtitle = 'Covariate NOT Included')
grid.arrange(man,qq, ncol=2)
xc_mat
xc_mat
model.matrix(xc_mat)
# Read-in our covariate data
xc_mat = as.matrix(read.csv('projectcovars.csv', row.names = 1))
model.matrix(xc_mat)
xc_mat
xc_mat = as.matrix(read.csv('projectcovars.csv', row.names = 1))
xc_mat <- xc_mat[,-1]
model.matrix(xc_mat)
xc_mat
# Read-in our covariate data
xc_mat = as.matrix(read.csv('projectcovars.csv'))
xc_mat <- xc_mat[,-1]
xc_mat <- xc_mat[,-1]
xc_mat
read.csv('projectcovars.csv')
model.matrix(xc~Popultion + Sex, data=xc_mat)
# Read-in our covariate data
xc_mat = as.matrix(read.csv('projectcovars.csv'))
xc_mat <- xc_mat[,-1]
model.matrix(~Popultion + Sex, data=xc_mat)
model.matrix(~Popultion + Sex, data=xc_mat)
xc_mat = as.matrix(read.csv('projectcovars.csv'))
model.matrix(~Popultion + Sex, data=xc_mat)
xc_mat = read.csv('projectcovars.csv')
model.matrix(~Popultion + Sex, data=xc_mat)
xc_mat
model.matrix(~Population + Sex, data=xc_mat)
xc_mat <- Xc[,-1]
xc_mat = read.csv('projectcovars.csv')
Xc <- model.matrix(~Population + Sex, data=xc_mat)
xc_mat <- Xc[,-1]
xc_mat
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,5],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat)))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
results.2
sim_pheno_mx
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,5],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat)))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
which(p.adjust(results.2$p) >= 0.05)
.adjust(results.2$p)
which(p.adjust(results.2$p) <= 0.05)
which(p.adjust(results.2$p) <= 0.05)
library(MASS)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(data.table)
# Convert genotypes to Xa & Xd
# # Details can be found in lab 6
gen_import <- read.csv("projectgenotypes.csv",
header = TRUE,
stringsAsFactors = FALSE,
row.names = 1, colClasses = "character")
gen_import
# Convert genotypes to Xa & Xd
# # Details can be found in lab 6
gen_import <- as.matrix(read.csv("projectgenotypes.csv",
header = TRUE,
stringsAsFactors = FALSE,
row.names = 1, colClasses = "character"))
# Convert genotypes to Xa & Xd
# # Details can be found in lab 6
gen_import <- as.matrix(read.csv("projectgenotypes.csv",
header = TRUE,
stringsAsFactors = FALSE,
row.names = 1, colClasses = "character"))
gen_import
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
# Convert genotypes to Xa & Xd
# # Details can be found in lab 6
gen_import <- as.matrix(read.csv("projectgenotypes.csv")
colnames(gen_import) <- NULL
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
gen_import
sim_pheno_mx <- read.csv("projectphenotypes.csv",
header = TRUE, row.names = 1)
sim_pheno_mx
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_undone)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(maf)
})
hist(maf, xlab="Minor Allele Frequency", ylab="Count",
main="Histogram of SNP Minor Allele Frequencies")
hist(maf, xlab="Minor Allele Frequency", ylab="Count",
main="Histogram of SNP Minor Allele Frequencies", breaks = 20)
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_undone)
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(maf,minor_allele)
})
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_undone)
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(minor_allele)
})
hist(maf, xlab="Minor Allele Frequency", ylab="Count",
main="Histogram of SNP Minor Allele Frequencies", breaks = 20)
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_undone)
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(minor_allele)
})
minor_allele
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_undone)
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(minor_allele)
})
maf
hist(maf, xlab="Minor Allele Frequency", ylab="Count",
main="Histogram of SNP Minor Allele Frequencies", breaks = 20)
table(geno_import)
table(geno_import[,1])
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_import[,1])
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(minor_allele)
})
maf
hist(maf, xlab="Minor Allele Frequency", ylab="Count",
main="Histogram of SNP Minor Allele Frequencies", breaks = 20)
table(maf)
gen_import
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_import[,1])
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(minor_allele)
})
minor_allele <- function(x) {
# Calculate the allele frequencies
freqs <- c(sum(x == 0), sum(x == 1), sum(x == 2)) / length(x)
# Identify the minor allele
if (freqs[1] <= freqs[2] & freqs[1] <= freqs[3]) {
return(0)
} else if (freqs[2] <= freqs[1] & freqs[2] <= freqs[3]) {
return(1)
} else {
return(2)
}
}
# Apply the function to each column of the XA matrix
minor_alleles <- apply(XA, 2, minor_allele)
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
maf <- apply(geno_import, 2, function(x) {
geno_undone <- unlist(strsplit(paste0(x), ''))
allele_count <- table(geno_import[,1])
minor_allele <- min(allele_count)
min_allele_count <- min(allele_count)
maf <- min_allele_count/length(geno_undone)
return(minor_allele)
})
table(maf)
hist(maf, xlab="Minor Allele Frequency", ylab="Count",
main="Histogram of SNP Minor Allele Frequencies", breaks = 20)
xd_mat <- ((2*xa_mat) - 1)
xd_mat <- ((2*xa_mat) - 1)
xd_mat
is.matrix(xd_mat)
xd_mat
xa_mat
gen_import
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
xa_mat <- gen_import
xd_mat <- ((2*xa_mat) - 1)
xa_mat
xd_mat
2*xa_mat
is.matrix(xa_mat)
xa_mat <- as.matrix(gen_import )
xd_mat <- ((2*xa_mat) - 1)
dim(xd_mat)
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,2],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat)))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
which(p.adjust(results.2$p) <= 0.05)
gene_info <- read.csv('gene_info.csv')
SNP_info <- read.csv('SNP_info.csv')
SNP_info
hits2 <- sort(SNP_info$position[indices2])
indices2 <- which(p.adjust(results.2$p) <= 0.05)
hits2 <- sort(SNP_info$position[indices2])
hits2
# Manhattan Plot
my.alpha = 0.05/ncol(xa_mat)
man <- ggplot(results.2, aes(x = index, y = -log10(p))) +
geom_point() +
geom_hline(yintercept = -log10(my.alpha), color = 'red', lty = 2) +
labs(x = 'Index', y = expression(-log[10]~p),
title = 'GWAS Manhattan Plot', subtitle='Covariates Included')
# QQ plot
observed_pvals = sort(results.2$p)
expected_pvals = qunif(seq(0, 1, length.out = length(observed_pvals) + 2), min = 0, max = 1)  ## Generate expected values. Note that we are using length+2
expected_pvals = expected_pvals[expected_pvals != 0 & expected_pvals != 1]  ## Remove the two extra values since they are 0 and 1
p_df = data.frame(observed = -log10(observed_pvals),
expected = -log10(expected_pvals))
qq <- ggplot(p_df, aes(x = expected, y = observed)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = 'red') +
labs(x = '-log10 Expected p-val',
y = '-log10 Observed p-val',
title = 'GWAS QQ plot',
subtitle = 'Covariates Included')
grid.arrange(man,qq, ncol=2)
xc.pca<- prcomp(t(xa_mat) %*% xa_mat)
xc.pca<- prcomp(xa_mat %*% t(xa_mat))
xc.pca<- prcomp(xa_mat %*% t(xa_mat))
xc.pca <- xc.pca[,1:3]
[,1:3]
xc.pca$x
xc.pca<- prcomp(xa_mat %*% t(xa_mat))
xc.pca <- xc.pca$x
xc.pca<- xc.pca[,1:3]
xc.pca
xc_mat = read.csv('projectcovars.csv')
Xc <- model.matrix(~Population + Sex, data=xc_mat)
xc_mat1 <- Xc[,-1]
Xc.just.sex <- model.matrix(~ Sex, data=xc_mat)
results.function<- function(xa_mat,xd_mat,xc_mat,sim_pheno_mx   ){
results.2 <- lapply(1:ncol(xa_mat), function(column.counter){
data.table(pval_calculator_w_covars(pheno_input = sim_pheno_mx[,2],
xa_input = as.matrix(xa_mat[, column.counter]),
xd_input = as.matrix(xd_mat[, column.counter]),
xz_input = as.matrix(xc_mat)))
}) %>% rbindlist() %>% mutate(p=V1, index = 1:ncol(xa_mat))
return( results.2)
}
gen_import <- read.csv("projectgenotypes.csv")
gen_import<- gen_import[,-1]
colnames(gen_import) <- NULL
rownames(gen_import) <- NULL
allele_count <- table(c(gen_in[,1],gen_in[,2]))
